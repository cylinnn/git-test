#!/bin/bash
app=inefi-1.00.50-7.x86_64.rpm 

packages=(debconf-1.5.74-4.el7.noarch.rpm) 

modules=( perl-Text-CharWidth perl-Text-Iconv perl-Text-WrapI18N perl-gettext perl-CGI epel-release mosquitto x11vnc ) 




# variable export
gdm_conf_def_path=`find /etc -maxdepth 1 -type d | grep "gdm"`
gdm_conf_custom_file="$gdm_conf_def_path/custom.conf"
xdg_conf_def_path=`find /etc -maxdepth 1 -type d | grep "xdg"`
xdg_conf_autostart_path=`find $xdg_conf_def_path -maxdepth 1 -type d | grep "autostart"`
INEFI_AUTOSTART_NAME=inefi-install.desktop
INEFI_AUTOSTART_FILE="$xdg_conf_autostart_path/$INEFI_AUTOSTART_NAME"
export INEFI_INST_USER=`printenv SUDO_USER`
export INEFI_INST_UID=`id -u $INEFI_INST_USER`
export INEFI_INST_HOME=$PWD
INEFI_SERVICE="inefi.service"
INEFI_CFGFILE="inefi.config"
INEFI_STATUS_SERVICE="inefi-status.service"


function modules_install()
{
    for module in "$@"
    do
        echo -n "$module install .... "
        yum install -y $module
        echo "Done"
    done
}

function packages_install()
{
    for package in "$@"
    do
        echo -n "$package install .... "
        rpm -Uvh $package
        echo "Done"
    done
}

function autostart_exist_chk()
{

    if [ -z "$INEFI_AUTOSTART_FILE" ]; then
        # echo "environment variable not import "
        return 0
    elif [ ! -f "$INEFI_AUTOSTART_FILE" ]; then
        # echo "inefi autostart not exist"
        return 0
    else
        # when autostart desktop script exist means some module restart before and need to delete it.
        printf "autostart & autologin -- "
        rm $INEFI_AUTOSTART_FILE
        sed -i "/AutomaticLogin/d" $gdm_conf_custom_file
        printf " removed\n"
    fi

    return 1
    # echo "inefi autostart exist"
}

function create_autostart_desktop_for_module_update()
{
    echo "[Desktop Entry]" > $INEFI_AUTOSTART_FILE
    echo "Type=Application" >> $INEFI_AUTOSTART_FILE
    echo "Name=Autostart Script" >> $INEFI_AUTOSTART_FILE
    echo "Exec=gnome-terminal --full-screen --working-directory=$INEFI_INST_HOME -e 'sudo ./install'" >> $INEFI_AUTOSTART_FILE
    echo "Icon=system-run" >> $INEFI_AUTOSTART_FILE
    echo "X-GNOME-Autostart-enabled=true" >> $INEFI_AUTOSTART_FILE
    echo "X-GNOME-Autostart-Delay=5" >> $INEFI_AUTOSTART_FILE
}

function enable_autologin()
{
    sed -i "/#Wayland/a AutomaticLogin=user" $gdm_conf_custom_file
    sed -i "/#Wayland/a AutomaticLoginEnable=True" $gdm_conf_custom_file
}

function module_mutter_check_n_update()
{
    local package="mutter"
    local MAJOR_MIN=3
    local MINOR_MIN=32
    local BUILD_MIN=2
    local ISSUE_MIN=60

    local package_info=`rpm -q mutter`
    # echo $package_info

    if [[ "$package_info" != *"$package"* ]]; then
        echo "PACKAGE : $package not installed"
        exit
    else
    	echo "PACKAGE : $package_info"
    fi

    # get major version string
    local major=$(echo ${package_info} | cut  -f2 -d-)
    local major_num=$(echo ${major} | cut  -f1 -d.)
    local minor_num=$(echo ${major} | cut  -f2 -d.)
    local build_num=$(echo ${major} | cut  -f3 -d.)

    # get release version string
    local release=$(echo ${package_info} | cut  -f3 -d-)
    local issue_num=$(echo ${release} | cut  -f1 -d.)
    local dist_str=$(echo ${release} | cut  -f2 -d.)
    local arch_str=$(echo ${release} | cut  -f3 -d.)

    # echo "$MAJOR -> $major_num"
    # echo "$MINOR -> $minor_num"
    # echo "$BUILD -> $build_num"
    # echo "$ISSUE -> $issue_num"
    # echo "$RELS -> $dist_str"

    if [ $((issue_num)) -lt $((ISSUE_MIN)) ]; then
        echo "mutter need update to latest version"
        yum update $package -y

        # check gdm custom.conf exist or not, when not will set default path replace it
        if [[ ! -f "$gdm_conf_custom_file" ]]; then
            gdm_conf_custom_file=/etc/gdm/custom.conf
        fi

        # create autostart
        create_autostart_desktop_for_module_update

        # enable autologin
        enable_autologin

        # restart gdm.service
        systemctl restart gdm.service

    else
    	echo "mutter version match mininum request"
    fi
}


test -e /etc/os-release && os_release="/etc/os-release" || os_release="/usr/lib/os-release"
source "${os_release}"
echo "Distrubution:${ID} and version:${VERSION_ID}"

if [ "$EUID" -ne 0 ]
    then echo "Permission denied"
    exit
elif [ "$ID" != "centos" && "$ID" != "sled" && "$ID" != "sles" ]; then  # Distribution check
    echo "without support non CentOS"
    exit
else
    if [ $((VERSION_ID)) -ge 8 ]; then
        # autostart exist check
        autostart_exist_chk

        # mutter module version check
        module_mutter_check_n_update
    fi

    echo "Start modules install"
    modules_install ${modules[@]}

    echo "Start packages install"
    packages_install ${packages[@]}

    # cfg exist check for environement set
    if test -f "$INEFI_CFGFILE"; then
        echo "cfg existed"
        export DEBIAN_FRONTEND=noninteractive
    else
        echo "cfg not exist, will entrey auto registraction mode"
        export DEBIAN_FRONTEND=noninteractive
    fi

    # Mian package install
    echo -n "$app install .... "
    rpm -Uvh $app
    echo "Done"

    cp -f /usr/local/inefi/x11vnc /usr/bin
    cp -f /usr/local/inefi/libvncserver.so.0.9.13 /usr/lib64
    cp -f /usr/local/inefi/libvncclient.so.0.9.13 /usr/lib64
    ln -s -f /usr/lib64/libvncserver.so.0.9.13 /usr/lib64/libvncserver.so
    ln -s -f /usr/lib64/libvncserver.so.0.9.13 /usr/lib64/libvncserver.so.0
    ln -s -f /usr/lib64/libvncserver.so.0.9.13 /usr/lib64/libvncserver.so.1
    ln -s -f /usr/lib64/libvncclient.so.0.9.13 /usr/lib64/libvncclient.so
    ln -s -f /usr/lib64/libvncclient.so.0.9.13 /usr/lib64/libvncclient.so.0
    ln -s -f /usr/lib64/libvncclient.so.0.9.13 /usr/lib64/libvncclient.so.1

    # duplicate cfg to inefi
    if [ -f "$INEFI_CFGFILE" ]; then
        cp $INEFI_CFGFILE /usr/local/inefi
    fi

    # Execute systemctl restart inefi.service
    echo -n "Restart $INEFI_SERVICE service ... "
    systemctl restart $INEFI_SERVICE
    echo " done"
    sleep 1

    # Execute systemctl restart inefi-status.service
    echo -n "Restart $INEFI_STATUS_SERVICE service ... "
    systemctl restart $INEFI_STATUS_SERVICE
    echo " done"
    sleep 1

    # back to $user
    su - $INEFI_INST_USER
    cd $INEFI_INST_HOME
fi

$SHELL

